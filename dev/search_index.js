var documenterSearchIndex = {"docs":
[{"location":"man/model/#SymPh.Model","page":"Model","title":"SymPh.Model","text":"Model(rhs!, mesh, state, prognostics; integratorstep! = rk3step!, cfl = 0.6, dtmax = 1, Umax = nothing)\n\nRepresents an equation along with a mesh, its saved state and an integrator\n\n\n\n\n\n","category":"type"},{"location":"man/model/#SymPh.step!","page":"Model","title":"SymPh.step!","text":"step!(model::Model; n=1, tend=-1)\n\nPerforms n integration steps of the model, and stops at tend if it is a strictly positive value\n\n\n\n\n\n","category":"function"},{"location":"man/model/#SymPh.run!","page":"Model","title":"SymPh.run!","text":"run!(model; ...)\n\nTODO document\n\n\n\n\n\n","category":"function"},{"location":"man/model/#SymPh.profile_model!","page":"Model","title":"SymPh.profile_model!","text":"profile_model!(model)\n\nRuns PProf to profile model\n\n\n\n\n\n","category":"function"},{"location":"man/kernels/#SymPh.Arrays.DepNode","page":"Kernel Generation","title":"SymPh.Arrays.DepNode","text":"DepNode(name::String, expr::Union{Nothing, Expression})\n\nA node of a dependency tree of expressions made of expressions\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#Differential-Geometry","page":"Differential Geometry","title":"Differential Geometry","text":"","category":"section"},{"location":"man/diffgeom/#Abstract-Objects","page":"Differential Geometry","title":"Abstract Objects","text":"","category":"section"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"These are abstract object representing differential forms and vectors","category":"page"},{"location":"man/diffgeom/#SymPh.Maths.Form","page":"Differential Geometry","title":"SymPh.Maths.Form","text":"Form{D,P<:Primality}\n\nArguments\n\nD::Integer : degree (0/1/2... form)\nP::Primality : The primality of the form\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.Vect","page":"Differential Geometry","title":"SymPh.Maths.Vect","text":"Vect{P<:Primality}\n\nA vector field\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#Variables","page":"Differential Geometry","title":"Variables","text":"","category":"section"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"The variables upon which we act with our operators. Typically our prognostic variables will be defined like this since they are not defined as an operation on something.","category":"page"},{"location":"man/diffgeom/#SymPh.Maths.FormVariable","page":"Differential Geometry","title":"SymPh.Maths.FormVariable","text":"FormVariable{D,P}(name::String) <: Form{D,P}\n\nA variable representing a named differential form\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.VectorVariable","page":"Differential Geometry","title":"SymPh.Maths.VectorVariable","text":"VectorVariable{P}(name::String) <: Vect{P}\n\nA variable representing a named vector field\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#Operators","page":"Differential Geometry","title":"Operators","text":"","category":"section"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"These are the operators acting on our variables. Their type is the type of the result of the operation.","category":"page"},{"location":"man/diffgeom/#The-Exterior-Derivative-\\mathrm{d}","page":"Differential Geometry","title":"The Exterior Derivative mathrmd","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.ExteriorDerivative","page":"Differential Geometry","title":"SymPh.Maths.ExteriorDerivative","text":"ExteriorDerivative{D,P}(name::String, omega::Form{D-1,P}) <: Form{D,P}\n\nThe exterior derivative mathrmdomega\n\nTransforms a k-form into a k+1-form\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"The exterior derivative mathrmdomega of a k-form omega is a k+1-form.","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"In 2D, ","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"mathrmdF^0 = partial_x f mathrmd x+partial_y f mathrmd y","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Corresponds to the gradient operation on a scalar field.","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"mathrmdU^1 = (partial_x u_2-partial_y u_1) mathrmd x wedge mathrmd y","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Corresponds to the curl of a vector field.","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"mathrmd W^2 = 0","category":"page"},{"location":"man/diffgeom/#The-Codifferential-\\delta","page":"Differential Geometry","title":"The Codifferential delta","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.Codifferential","page":"Differential Geometry","title":"SymPh.Maths.Codifferential","text":"Codifferential{D,P}(name::String, omega::Form{D+1,P}) <: Form{D,P}\n\nThe codifferential delta omega\n\nTransforms a k-form into a k-1-form\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#The-Interior-Product-with-a-vector-field-\\iota_\\mathbf{X}","page":"Differential Geometry","title":"The Interior Product with a vector field iota_mathbfX","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.InteriorProduct","page":"Differential Geometry","title":"SymPh.Maths.InteriorProduct","text":"InteriorProduct{D, Pv, Pf}(name::String, X::Vect, omega::Form, interp = Nothing) <: Form{D, Pf}\n\nThe contraction of a k-form omega with a vector field mathbfX which gives us a k-1-form iota_mathbfXomega\n\nPossibility to specify interpolation function\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Let mathbfX be a vector field. Then :","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"iota_mathbfX  Omega^k (M) mapsto Omega^k-1 (M)","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"We have iota_mathbfX (alpha)= alpha (mathbfX), and iota_mathbfX ( alpha wedge beta) = ( iota_mathbfX  alpha) wedge  beta + (-1)^alpha  alpha wedge ( iota_mathbfX beta ) with alpha=k the degree of the k-form alpha.","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Let mathbfX=x_1 mathbfi + x_2 mathbfj, then (in 2D),","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"iota_mathbfX F^0 = 0","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"iota_mathbfX U^1 = iota_mathbfX(u_1 mathrmd x+u_2 mathrmd y)=u_1 iota_mathbfX mathrmd x+u_2 iota_mathbfX mathrmd y = u_1x_1+u_2 x_2","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Corresponds to scalar product of two vector fields.","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"iota_mathbfX W^2 = iota_mathbfX(w mathrmd x wedge mathrmd y) = w( iota_mathbfX( mathrmd x) wedge mathrmd y - mathrmd x wedge iota_mathbfX( mathrmd  y)) = w(x_1 mathrmd  y-x_2 mathrmd  x)","category":"page"},{"location":"man/diffgeom/","page":"Differential Geometry","title":"Differential Geometry","text":"Corresponds to a kind of \"perpendicular product\" of a scalar field with a vector field.","category":"page"},{"location":"man/diffgeom/#The-Sharp-\\sharp","page":"Differential Geometry","title":"The Sharp sharp","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.Sharp","page":"Differential Geometry","title":"SymPh.Maths.Sharp","text":"Sharp{P}(name::String, form::Form{1, P}) <: Vect{P}\n\nCorresponds to an application of the metric\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#The-Hodge-star-\\star","page":"Differential Geometry","title":"The Hodge star star","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.Hodge","page":"Differential Geometry","title":"SymPh.Maths.Hodge","text":"Hodge{D, P}(name::String, form::Form) <: Form{D, P}\n\nBrings a  k-form to a n-k form and goes from dual to primal and inversely\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#The-inverse-of-a-Laplacian","page":"Differential Geometry","title":"The inverse of a Laplacian","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.InverseLaplacian","page":"Differential Geometry","title":"SymPh.Maths.InverseLaplacian","text":"InverseLaplacian\n\nRepresents the solution to a Poisson problem\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#Others","page":"Differential Geometry","title":"Others","text":"","category":"section"},{"location":"man/diffgeom/#SymPh.Maths.Addition","page":"Differential Geometry","title":"SymPh.Maths.Addition","text":"Addition{D,P}(name::String, left::Form{D,P}, right::Form{D,P}) <: Form{D,P}\n\nThe element-wise sum left + right.\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.Substraction","page":"Differential Geometry","title":"SymPh.Maths.Substraction","text":"Substraction{D,P}(name::String, left::Form{D,P}, right::Form{D,P}) <: Form{D,P}\n\nThe substraction left - right.\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.Negative","page":"Differential Geometry","title":"SymPh.Maths.Negative","text":"Negative{D,P}(name::String, form::Form{D,P}) <: Form{D,P}\n\nThe inverse of a form.\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.FuncCall","page":"Differential Geometry","title":"SymPh.Maths.FuncCall","text":"FuncCall{D, P}(name::String, func, args::Vector{Form}) <: Form{D,P}\n\nRepresents a call to func applied to the objects represented by args. Forces the computation of its arguments.\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.Division","page":"Differential Geometry","title":"SymPh.Maths.Division","text":"Division{D,P}(name::String, left::Form{D,P}, right::Form) <: Form{D,P}\n\nTODO What is that actually in terms of FORMS ? Simple division by a scalar field proxied by a 0-form ?\n\n\n\n\n\n","category":"type"},{"location":"man/diffgeom/#SymPh.Maths.RealProdForm","page":"Differential Geometry","title":"SymPh.Maths.RealProdForm","text":"RealProdForm{D, P}(name::String, real::Real, form::Form) <: Form{D, P}\n\nreal time form\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"SymPh is a module","category":"page"},{"location":"man/equation/#Defining-our-equation","page":"Building an equation","title":"Defining our equation","text":"","category":"section"},{"location":"man/equation/#The-maths","page":"Building an equation","title":"The maths","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We will us as an example the stream function-vorticity formulation of the Euler equations with the vorticity omega as our prognostic variable. ","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"This gives us ","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"partial_t omega = mathcalL_U omega = mathrmd(iota_U omega)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"with ","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"begincases\n    nabla^2 omega^2 = Psi^2 \n    u^1 = delta Psi \n    U = u^sharp\nendcases","category":"page"},{"location":"man/equation/#Representing-it","page":"Building an equation","title":"Representing it","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We use the @Let macro to avoid having to specify the name of each object we define. It will use the variable name as the object name.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We start by defining our prognostic variable :","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"@Let omega = FormVariable{2, Dual}()","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"Then we define the rest of the variables in relation to already defined variables :","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"@Let psi = InverseLaplacian(omega)\n@Let u = Codifferential(psi)\n@Let U = Sharp(u)\n\n#Time derivative\n@Let dtomega = - ExteriorDerivative(InteriorProduct(U, omega)) #dtω = L(U,ω)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"For now (if we want to use the time integrator from SymPh) the time derivative of prognostics variables must have the same name as the variable with dt at the beginning.","category":"page"},{"location":"man/equation/#Specifying-the-numerical-methods","page":"Building an equation","title":"Specifying the numerical methods","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We then build an ExplicitParam object, specifying for example the interpolation method used for the interior product.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"explparams = ExplicitParam(; interp = Arrays.weno)","category":"page"},{"location":"man/equation/#Building-the-kernel-function","page":"Building an equation","title":"Building the kernel function","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We can now use those objects to finally generate the function that will perform our computations.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"euler_rhs! = to_kernel(dtomega; save = [\"u_i\", \"u_j\", \"ι_U_omega_i\", \"ι_U_omega_j\"], explparams = explparams)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We have to pass the objects that we want to be computed, for example in the case of a time integration, our time derivative, as well as a list of intermediary values that we want saved and our numerical methods.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"## Building the mesh","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We then define the parameters of a mesh, notably its size and a mask of its fluid cells","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"ni = 100\nnj = 100\nnh = 3\n\nmsk = zeros(ni, nj)\nmsk[nh+1:ni-nh, nh+1:nj-nh] .= 1\n\nLx, Ly = (1,1)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We also have to choose a loop manager to run the program","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"scalar = PlainCPU()\nsimd = VectorizedCPU(16)\nthreads = MultiThread(scalar)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"And we can finally build our mesh object","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"mesh = Arrays.Mesh(ni, nj, nh, thsimd, msk, Lx, Ly)","category":"page"},{"location":"man/equation/#Defining-the-state-and-initial-conditions","page":"Building an equation","title":"Defining the state and initial conditions","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We initialize a State object, that will automatically allocate the arrays we ask it to give us, if they are not already initialized","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"state = State(mesh)","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"and we fill our omega with an initial condition, for example a vortex merging experiment :","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"gaussian(x,y,x0,y0,sigma) = exp(-((x-x0)^2 + (y-y0)^2)/(2*sigma^2))\ndipole(x,y,x0,y0,d,sigma) = gaussian(x, y, x0+d/2, y0, sigma) + gaussian(x, y, x0-d/2, y0, sigma)\n\nomega = state.omega\nfor i in nh+1:nx-nh, j in nh+1:ny-nh\n\tx = mesh.xc[i,j]\n\ty = mesh.yc[i,j]\n\tomega[i,j] = tripole(x, y, 0.5,0.5,0.3,0.05) * mesh.msk2d[i,j]\nend","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We can now finally create the integration model that will hold all of this, by also specifying our prognostic variable and an integrator.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"model = Model(euler_rhs!, mesh, state, [\"omega\"]; cfl = 100., dtmax = 5., integratorstep! = rk3step!)","category":"page"},{"location":"man/equation/#Running-the-simulation","page":"Building an equation","title":"Running the simulation","text":"","category":"section"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"We can now run our model for a certain time, and choose which variables should be written to disk.","category":"page"},{"location":"man/equation/","page":"Building an equation","title":"Building an equation","text":"run!(model; save_every = 5, profiling = false, tend = 10000, maxite = 100, writevars = (:u_i, :u_j, :omega, :psi))","category":"page"}]
}
